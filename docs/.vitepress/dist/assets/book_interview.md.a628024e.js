import{_ as e,H as t,o as c,c as r,J as l,E as p,C as s,a,V as o}from"./chunks/framework.6e551575.js";const v=JSON.parse('{"title":"🎃 面试摸底","description":"","frontmatter":{},"headers":[],"relativePath":"book/interview.md","filePath":"book/interview.md"}'),D={name:"book/interview.md"},y=s("h1",{id:"面试摸底",tabindex:"-1"},[a("🎃 面试摸底 "),s("a",{class:"header-anchor",href:"#面试摸底","aria-label":'Permalink to ":jack_o_lantern: 面试摸底"'},"​")],-1),F=s("br",null,null,-1),i=o('<br><blockquote><p>    以下所有面试题资源文章由<strong>阿凯</strong>整理并收录，此栏目为学习内容。供参考学习。此后会不定期更新，谢谢您的关注与支持!</p></blockquote><br><br><blockquote><p><code>前路漫漫，当克己， 当慎独。工作再忙再累也要抽出时间休息哦!🌷</code> <br><br>                                         ————送给在互联网行业矜矜业业的的每一位工作者 <br></p></blockquote><p>   <a href="https://gitee.com/AkaiBlog" target="_blank" rel="noreferrer">Gitee开源项目合集</a><br>    <a href="https://github.com/akaibiu" target="_blank" rel="noreferrer">Github开源项目合集</a><br>    <a href="https://ext.dcloud.net.cn/publisher?id=690316" target="_blank" rel="noreferrer">Dcloud开源插件合集</a><br>    <a href="https://blog.csdn.net/weixin_56083194?type=blog" target="_blank" rel="noreferrer">CSDN文章精选合集</a><br>    <a href="https://www.yuque.com/u21729372/kwgz8c" target="_blank" rel="noreferrer">语雀文章精选合集</a><br></p><br>',7),B=o(`<br><br><img src="https://mp-544a8cd9-03b3-41fd-9f50-daa7de994b60.cdn.bspapp.com/cloudstorage/350bbf07-8a90-4f73-9ca9-833d583b9759.jpg" width="240"><br><br><br><br><br><br><br><br><h2 id="html" tabindex="-1">💖Html <a class="header-anchor" href="#html" aria-label="Permalink to &quot;:sparkling_heart:Html&quot;">​</a></h2><ul><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li></ul><h2 id="css" tabindex="-1">😚css <a class="header-anchor" href="#css" aria-label="Permalink to &quot;:kissing_closed_eyes:css&quot;">​</a></h2><ul><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li></ul><h2 id="javascript" tabindex="-1">😘JavaScript <a class="header-anchor" href="#javascript" aria-label="Permalink to &quot;:kissing_heart:JavaScript&quot;">​</a></h2><h4 id="_1-js有哪些数据类型" tabindex="-1">1. Js有哪些数据类型 <a class="header-anchor" href="#_1-js有哪些数据类型" aria-label="Permalink to &quot;1. Js有哪些数据类型&quot;">​</a></h4><p>JavaScript共有八种数据类型</p><p>基本数据类型： Undefined、Null、Boolean、Number、String、Symbol、BigInt。</p><p>引用数据类型：object,function,array</p><p>其中 Symbol 和 BigInt 是ES6 中新增的数据类型：</p><ul><li>Symbol 代表创建后独一无二且不可变的数据类型，它主要是为了解决可能出现的全局变量冲突的问题。</li><li>BigInt 是一种数字类型的数据，它可以表示任意精度格式的整数，使用 BigInt 可以安全地存储和操作大整数，即使这个数已经超出了 Number 能够表示的安全整数范围。</li></ul><h4 id="_2-数据类型检测的方式有哪些" tabindex="-1">2. 数据类型检测的方式有哪些 <a class="header-anchor" href="#_2-数据类型检测的方式有哪些" aria-label="Permalink to &quot;2. 数据类型检测的方式有哪些&quot;">​</a></h4><p>判断数据类型的方法一般可以通过：<strong>typeof</strong>、<strong>instanceof</strong>（英森特赛奥夫）、<strong>constructor（肯死抓科特）</strong>、<strong>toString</strong>四种常用方法</p><table><thead><tr><th>不同类型的优缺点</th><th>typeof</th><th>instanceof</th><th>constructor</th><th>Object.prototype.toString.call</th></tr></thead><tbody><tr><td>优点</td><td>使用简单</td><td>能检测出<code>引用类型</code></td><td>基本能检测所有的类型（除了null和undefined）</td><td>检测出所有的类型</td></tr><tr><td>缺点</td><td>只能检测出除null外的基本数据类型和引用数据类型中的function</td><td>不能检测出基本类型，且不能跨iframe</td><td>constructor易被修改，也不能跨iframe</td><td>IE6下，undefined和null均为Object</td></tr></tbody></table><h4 id="_3-null和undefined区别" tabindex="-1">3.null和undefined区别 <a class="header-anchor" href="#_3-null和undefined区别" aria-label="Permalink to &quot;3.null和undefined区别&quot;">​</a></h4><ul><li>首先 Undefined 和 Null 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 undefined 和 null。</li><li>undefined 代表的含义是<strong>未定义</strong>，null 代表的含义是<strong>空对象</strong>。一般变量声明了但还没有定义的时候会返回 undefined，null主要用于赋值给一些可能会返回对象的变量，作为初始化。</li><li>undefined 在 JavaScript 中不是一个保留字，这意味着可以使用 undefined 来作为一个变量名，但是这样的做法是非常危险的，它会影响对 undefined 值的判断。我们可以通过一些方法获得安全的 undefined 值，比如说 void 0。</li><li>当对这两种类型使用 typeof 进行判断时，Null 类型化会返回 “object”，这是一个历史遗留的问题。当使用双等号对两种类型的值进行比较时会返回 true，使用三个等号时会返回 false。</li></ul><h4 id="_4-如何判断-this-的指向" tabindex="-1">4.如何判断 this 的指向 <a class="header-anchor" href="#_4-如何判断-this-的指向" aria-label="Permalink to &quot;4.如何判断 this 的指向&quot;">​</a></h4><ul><li>第一种是<strong>函数调用模式</strong>，当一个函数不是一个对象的属性时，直接作为函数来调用时，this 指向全局对象。</li><li>第二种是<strong>方法调用模式</strong>，如果一个函数作为一个对象的方法来调用时，this 指向这个对象。</li><li>第三种是<strong>构造器调用模式</strong>，如果一个函数用 new 调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象。</li><li>第四种是 <strong>apply 、 call 和 bind 调用模式</strong>，这三个方法都可以显示的指定调用函数的 this 指向。其中 apply 方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。call 方法接收的参数，第一个是 this 绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用 call() 方法时，传递给函数的参数必须逐个列举出来。bind 方法通过传入一个对象，返回一个 this 绑定了传入对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变。</li></ul><h4 id="_5-for-in和for-of的区别" tabindex="-1">5. for...in和for...of的区别 <a class="header-anchor" href="#_5-for-in和for-of的区别" aria-label="Permalink to &quot;5. for...in和for...of的区别&quot;">​</a></h4><p>for…of 是ES6新增的遍历方式，允许遍历一个含有iterator接口的数据结构（数组、对象等）并且返回各项的值，和ES3中的for…in的区别如下</p><ul><li>for…of 遍历获取的是对象的键值，for…in 获取的是对象的键名；</li><li>for… in 会遍历对象的整个原型链，性能非常差不推荐使用，而 for … of 只遍历当前对象不会遍历原型链；</li><li>对于数组的遍历，for…in 会返回数组中所有可枚举的属性(包括原型链上可枚举的属性)，for…of 只返回数组的下标对应的属性值；</li></ul><p><strong>总结：</strong> for...in 循环主要是为了遍历对象而生，不适用于遍历数组；for...of 循环可以用来遍历数组、类数组对象，字符串、Set、Map 以及 Generator 对象。</p><h4 id="_6-数组的遍历方法有哪些-没背" tabindex="-1">6. 数组的遍历方法有哪些（没背） <a class="header-anchor" href="#_6-数组的遍历方法有哪些-没背" aria-label="Permalink to &quot;6. 数组的遍历方法有哪些（没背）&quot;">​</a></h4><table><thead><tr><th><strong>方法</strong></th><th><strong>是否改变原数组</strong></th><th><strong>特点</strong></th></tr></thead><tbody><tr><td>forEach()</td><td>否</td><td>数组方法，不改变原数组的长度，没有返回值</td></tr><tr><td>map()</td><td>否</td><td>数组方法，不改变原数组的长度，有返回值，可链式调用</td></tr><tr><td>filter()</td><td>否</td><td>数组方法，过滤数组，返回包含符合条件的元素的数组，可链式调用</td></tr><tr><td>for...of</td><td>否</td><td>for...of遍历具有Iterator迭代器的对象的属性，返回的是数组的元素、对象的属性值，不能遍历普通的obj对象，将异步循环变成同步循环</td></tr><tr><td>every() 和 some()</td><td>否</td><td>数组方法，some()只要有一个是true，便返回true；而every()只要有一个是false，便返回false.</td></tr><tr><td>find() 和 findIndex()</td><td>否</td><td>数组方法，find()返回的是第一个符合条件的值；findIndex()返回的是第一个返回条件的值的索引值</td></tr><tr><td>reduce() 和 reduceRight()</td><td>否</td><td>数组方法，reduce()对数组正序操作；reduceRight()对数组逆序操作</td></tr></tbody></table><h4 id="_7-foreach和map方法有什么区别" tabindex="-1">7. forEach和map方法有什么区别 <a class="header-anchor" href="#_7-foreach和map方法有什么区别" aria-label="Permalink to &quot;7. forEach和map方法有什么区别&quot;">​</a></h4><p>这方法都是用来遍历数组的，两者区别如下：</p><ul><li>forEach()方法会针对每一个元素提供执行的函数，如果遍历的元素是引用数据类型，则可以改变指针指向的堆内存里的值，该方法没有返回值；</li><li>map()方法返回一个新数组，新数组中的值为原数组调用函数处理之后的值，如果遍历的元素是引用数据类型，则可以改变指针指向的堆内存里的值</li></ul><h4 id="_8-说说你对浅拷贝和深拷贝的理解" tabindex="-1">8. 说说你对浅拷贝和深拷贝的理解 <a class="header-anchor" href="#_8-说说你对浅拷贝和深拷贝的理解" aria-label="Permalink to &quot;8. 说说你对浅拷贝和深拷贝的理解&quot;">​</a></h4><p>浅拷贝：</p><ul><li>浅拷贝，指的是创建新的数据，这个数据有着原始数据属性值的一份精确拷贝</li><li>如果属性是基本类型，拷贝的就是基本类型的值。如果属性是引用类型，拷贝的就是内存地址</li><li>即浅拷贝是拷贝一层，深层次的引用类型则共享内存地址</li></ul><p>常见的浅拷贝：</p><ul><li>Object.assign</li><li>Object.create</li><li>slice</li><li>concat()</li><li>展开运算符</li></ul><p><strong>深拷贝</strong></p><p>深拷贝开辟一个新的栈，两个对象属完成相同，但是对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性</p><p>常见的深拷贝方式有：</p><ul><li>_.cloneDeep()。loadsh</li><li>jQuery.extend()</li><li>JSON.stringify()</li><li>手写循环递归</li></ul><h4 id="_9-什么是闭包" tabindex="-1">9.什么是闭包？ <a class="header-anchor" href="#_9-什么是闭包" aria-label="Permalink to &quot;9.什么是闭包？&quot;">​</a></h4><ul><li>✅ 官方说法：闭包就是指有权访问另一个函数作用域中的变量的函数。</li><li>✅ MDN说法：闭包是一种特殊的对象。它由两部分构成：函数，以及创建该函数的环境。环境由闭包创建时在作用域中的任何局部变量组成。</li></ul><p><strong>深度回答</strong></p><p>浏览器在加载页面会把代码放在栈内存（ ECStack ）中执行，函数进栈执行会产生一个私有上下文（ EC ），此上下文能保护里面的使用变量（ AO ）不受外界干扰，并且如果当前执行上下文中的某些内容，被上下文以外的内容占用，当前上下文不会出栈释放，这样可以保存里面的变量和变量值，所以我认为闭包是一种保存和保护内部私有变量的机制。</p><h4 id="_10-闭包的作用" tabindex="-1">10.闭包的作用 <a class="header-anchor" href="#_10-闭包的作用" aria-label="Permalink to &quot;10.闭包的作用&quot;">​</a></h4><p>闭包有两个常用的用途；</p><ul><li>闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，可以通过在外部调用闭包函数，从而在外部访问到函数内部的变量，可以使用这种方法来<strong>创建私有变量</strong>。</li><li>闭包的另一个用途是使已经运行结束的函数上下文中的<strong>变量对象继续留在内存中</strong>，因为闭包函数保留了这个变量对象的引用，所以这个变量对象不会被回收。</li></ul><h4 id="_11-闭包在项目中的引用场景-以及带来的问题" tabindex="-1">11.闭包在项目中的引用场景，以及带来的问题 <a class="header-anchor" href="#_11-闭包在项目中的引用场景-以及带来的问题" aria-label="Permalink to &quot;11.闭包在项目中的引用场景，以及带来的问题&quot;">​</a></h4><p>在实际的项目中，会基于闭包把自己编写的模块内容包裹起来，这样编写就可以保护自己的代码是私有的，防止和全局变量或者是其他的代码冲突，这一点是利用保护机制。</p><p>但是不建议过多的使用闭包，因为使用不被释放的上下文，是占用栈内存空间的，过多的使用会导致导致内存泄漏。</p><p>解决闭包带来的内存泄漏问题的方法是：使用完闭包函数后手动释放。</p><h4 id="_12-闭包的使用场景" tabindex="-1">12.闭包的使用场景 <a class="header-anchor" href="#_12-闭包的使用场景" aria-label="Permalink to &quot;12.闭包的使用场景&quot;">​</a></h4><ol><li><code>return</code> 回一个函数</li><li>函数作为参数</li><li>IIFE（自执行函数）</li><li>循环赋值</li><li>使用回调函数就是在使用闭包</li><li>节流防抖</li><li>函数柯里化</li></ol><h4 id="_13-什么是作用域链" tabindex="-1">13.什么是作用域链 <a class="header-anchor" href="#_13-什么是作用域链" aria-label="Permalink to &quot;13.什么是作用域链&quot;">​</a></h4><p>当在<code>js</code>中使用一个变量的时候，首先<code>js</code>引擎会尝试在当前作用域下去寻找该变量，如果没找到，再到它的上层作用域寻找，以此类推直到找到该变量或是已经到了全局作用域，这样的变量作用域访问的链式结构, 被称之为作用域链</p><p><strong>深度回答</strong></p><p>作用域链的本质上是一个指向变量对象的指针列表。变量对象是一个包含了执行环境中所有变量和函数的对象。作用域链的前端始终都是当前执行上下文的变量对象。全局执行上下文的变量对象（也就是全局对象）始终是作用域链的最后一个对象。</p><h4 id="_14-作用域链的作用" tabindex="-1">14.作用域链的作用 <a class="header-anchor" href="#_14-作用域链的作用" aria-label="Permalink to &quot;14.作用域链的作用&quot;">​</a></h4><p>作用域链的作用是<strong>保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，可以访问到外层环境的变量和函数。</strong></p><h4 id="_15-说说js中的预解析" tabindex="-1">15.说说Js中的预解析？ <a class="header-anchor" href="#_15-说说js中的预解析" aria-label="Permalink to &quot;15.说说Js中的预解析？&quot;">​</a></h4><p>JS 引擎在运行一份代码的时候，会按照下面的步骤进行工作：</p><p>1.把变量的声明提升到当前作用域的最前面，只会提升声明，不会提升赋值</p><p>2.把函数的声明提升到当前作用域的最前面，只会提升声明，不会提升调用</p><p>3.先提升 function，在提升 var</p><h4 id="_16-变量提升与函数提升的区别" tabindex="-1">16.变量提升与函数提升的区别？ <a class="header-anchor" href="#_16-变量提升与函数提升的区别" aria-label="Permalink to &quot;16.变量提升与函数提升的区别？&quot;">​</a></h4><p><strong>变量提升</strong></p><p>简单说就是在 JavaScript 代码执行前引擎会先进行预编译，预编译期间会将<code>变量声明与函数声明</code>提升至其<code>对应作用域的最顶端</code>，<code>函数内声明的变量</code>只会提升至<code>该函数作用域最顶层</code>，<code>当函数内部定义的一个变量与外部相同时</code>，那么<code>函数体内的这个变量就会被上升到最顶端</code>。</p><p><strong>函数提升</strong></p><p>函数提升只会提升函数声明式写法，函数表达式的写法不存在函数提升</p><p>函数提升的优先级大于变量提升的优先级，即函数提升在变量提升之上</p><h4 id="_17-什么是箭头函数-有什么特征" tabindex="-1">17.什么是箭头函数，有什么特征 <a class="header-anchor" href="#_17-什么是箭头函数-有什么特征" aria-label="Permalink to &quot;17.什么是箭头函数，有什么特征&quot;">​</a></h4><p>使用 &quot;箭头&quot; ( =&gt; ) 来定义函数. 箭头函数相当于匿名函数, 并且简化了函数定义</p><p><strong>箭头函数的特征:</strong></p><p>1- 箭头函数没有this, this指向定义箭头函数所处的外部环境 2- 箭头函数的this永远不会变，call、apply、bind也无法改变 3- 箭头函数只能声明成<strong>匿名函数</strong>，但可以通过表达、式的方式让箭头函数具名 4- 箭头函数没有原型prototype，即不能用作为构造函数 5- 箭头函数不能当做一个构造函数 因为 this 的指向问题 6- 箭头函数没有 arguments 在箭头函数内部访问这个变量访问的是外部环境的arguments, 可以使用 ...代替</p><h4 id="_18-说说你对递归函数的理解" tabindex="-1">18.说说你对递归函数的理解 <a class="header-anchor" href="#_18-说说你对递归函数的理解" aria-label="Permalink to &quot;18.说说你对递归函数的理解&quot;">​</a></h4><p>如果一个函数在内部调用自身本身，这个函数就是递归函数</p><p>其核心思想是把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解</p><p>一般来说，递归需要有边界条件、递归前进阶段和递归返回阶段。当边界条件不满足时，递归前进；当边界条件满足时，递归返回</p><p><strong>优点</strong>：结构清晰、可读性强</p><p><strong>缺点</strong>：<span style="color:red;">效率低、调用栈可能会溢出</span>，其实每一次函数调用会在内存栈中分配空间，而每个进程的栈的容量是有限的，当调用的层次太多时，就会超出栈的容量，从而导致栈溢出。</p><h4 id="_19-call、apply、bind三者的异同" tabindex="-1">19.call、apply、bind三者的异同 <a class="header-anchor" href="#_19-call、apply、bind三者的异同" aria-label="Permalink to &quot;19.call、apply、bind三者的异同&quot;">​</a></h4><p><strong>共同点</strong> :</p><ul><li>都可以改变this指向;</li><li>三者第一个参数都是<code>this</code>要指向的对象，没有这个参数或参数为<code>undefined</code>或<code>null</code>，则默认指向全局<code>window</code></li></ul><p><strong>不同点</strong>:</p><p>1.call 和 apply 会调用函数, 并且改变函数内部this指向.</p><p>2.call 和 apply传递的参数不一样,call传递参数使用逗号隔开,apply使用数组传递，且<code>apply</code>和<code>call</code>是一次性传入参数，而<code>bind</code>可以分为多次传入</p><p>3.bind是返回绑定this之后的函数</p><ul><li><strong>应用场景</strong><ol><li>call 经常做继承.</li><li>apply经常跟数组有关系. 比如借助于数学对象实现数组最大值最小值</li><li>bind 不调用函数,但是还想改变this指向. 比如改变定时器内部的this指向</li></ol></li></ul><h4 id="_20-说说面向对象的特性与特点" tabindex="-1">20.说说面向对象的特性与特点 <a class="header-anchor" href="#_20-说说面向对象的特性与特点" aria-label="Permalink to &quot;20.说说面向对象的特性与特点&quot;">​</a></h4><ul><li>封装性</li><li>继承性</li><li>多态性</li></ul><p>面向对象编程具有灵活、代码可复用、容易维护和开发的有点、更适合多人合作的大型软件项目</p><h4 id="_21-创建对象有哪几种方法" tabindex="-1">21.创建对象有哪几种方法？ <a class="header-anchor" href="#_21-创建对象有哪几种方法" aria-label="Permalink to &quot;21.创建对象有哪几种方法？&quot;">​</a></h4><ol><li><p>字面量的形式直接创建对象</p></li><li><p>函数方法</p><p>（1）<strong>工厂模式</strong>，工厂模式的主要工作原理是用函数来封装创建对象的细节，从而通过调用函数来达到复用的目的。</p><p>（2）<strong>构造函数模式</strong></p><p>（3）原型模式</p><p>（4）构造函数模式+原型模式，这是创建自定义类型的最常见方式。</p><p>（5）寄生构造函数模式</p><p>（6）动态原型模式</p></li><li><p>class创建</p></li></ol><h4 id="_22-array-数组对象-数组常用方法" tabindex="-1">22.Array 数组对象，数组常用方法 <a class="header-anchor" href="#_22-array-数组对象-数组常用方法" aria-label="Permalink to &quot;22.Array 数组对象，数组常用方法&quot;">​</a></h4><p>1.join() 将一个数组转成字符串。返回一个字符串</p><p>2.reverse() 将数组中各元素颠倒顺序</p><p>3.delete 运算符只能删除数组元素的值，而所占空间还在，总长度没变(arr.length)</p><p>4.shift()删除数组中第一个元素，返回删除的那个值，并将长度减 1</p><p>5.pop()删除数组中最后一个元素，返回删除的那个值，并将长度减 1</p><p>6.unshift() 往数组前面添加一个或多个数组元素，长度会改变</p><p>7.push() 往数组结尾添加一个或多个数组元素，长度会改变</p><p>8.concat() 连接数组</p><p>9.slice() 切割数组，返回数组的一部分</p><p>10.splice()插入、删除或替换数组的元素</p><p>11.toLocaleString() 把数组转换成局部字符串</p><p>12.toString()将数组转换成一个字符串</p><p>13.forEach()遍历所有元素</p><p>14.every()判断所有元素是否都符合条件</p><p>15.sort()对数组元素进行排序</p><p>16.map()对元素重新组装，生成新数组</p><p>17.filter()过滤符合条件的元素</p><p>18.find() 查找 返回满足提供的测试函数的第一个元素的值。否则返回 undefined。</p><p>19.some() 判断是否有一个满足条件 ，返回布尔值</p><p>20.fill() 填充数组</p><p>21.flat() 数组扁平化</p><p>能影响原来数组的方法 splice() push() pop() shift() unshift() reverse() sort() ...</p><p>不会影响原来数组的方法</p><p>​ concat() slice() forEach() toSting() join() reduce() map() filter() slice() findIndex() ...</p><p>无返回值的：</p><p>​ forEach()</p><p>返回值为新数组的(js哪些数组方法会返回新内存空间--换一种问法)：</p><p>​ splice()、concat()、slice()、sort()、reverse()、map()、filter()</p><h4 id="_23-说一下hasownproperty、instanceof方法" tabindex="-1">23.说一下hasOwnProperty、instanceof方法 <a class="header-anchor" href="#_23-说一下hasownproperty、instanceof方法" aria-label="Permalink to &quot;23.说一下hasOwnProperty、instanceof方法&quot;">​</a></h4><p><strong>hasOwnProperty()</strong> 方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性（也就是，是否有指定的键）。</p><p><strong>instanceof</strong> <strong>运算符</strong>用于检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上。</p><h4 id="_24-什么是原型对象-说说对它的理解" tabindex="-1">24.什么是原型对象，说说对它的理解 <a class="header-anchor" href="#_24-什么是原型对象-说说对它的理解" aria-label="Permalink to &quot;24.什么是原型对象，说说对它的理解&quot;">​</a></h4><p><strong>构造函数的内部的 prototype 属性指向的对象，就是构造函数的原型对象。</strong></p><p>原型对象包含了可以由该构造函数的所有实例共享的属性和方法。当使用构造函数新建一个实例对象后，在这个对象的内部将包含一个指针(<em><strong>*proto*</strong></em>)，这个指针指向构造函数的 原型对象，在 ES5 中这个指针被称为对象的原型。</p><h4 id="_25-什么是原型链" tabindex="-1">25.什么是原型链 <a class="header-anchor" href="#_25-什么是原型链" aria-label="Permalink to &quot;25.什么是原型链&quot;">​</a></h4><p><strong>原型链是一种查找规则</strong></p><p>当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又会有自己的原型，于是就这样一直找下去，这种链式查找过程称之为原型链</p><h4 id="_26-原型链的终点是什么" tabindex="-1">26. 原型链的终点是什么？ <a class="header-anchor" href="#_26-原型链的终点是什么" aria-label="Permalink to &quot;26. 原型链的终点是什么？&quot;">​</a></h4><p>原型链的尽头是null。也就是<strong>Object.prototype.*<em>proto*</em></strong></p><h4 id="_27-实现继承的方法" tabindex="-1">27.实现继承的方法 <a class="header-anchor" href="#_27-实现继承的方法" aria-label="Permalink to &quot;27.实现继承的方法&quot;">​</a></h4><p>1.原型链继承</p><p><strong>关键：子类构造函数的原型为父类构造函数的实例对象</strong></p><p><strong>缺点</strong>：1、子类构造函数无法向父类构造函数传参。</p><p>2、所有的子类实例共享着一个原型对象，一旦原型对象的属性发生改变，所有子类的实例对象都会收影响</p><p>3、如果要给子类的原型上添加方法，必须放在Son.prototype = new Father()语句后面</p><p>2.借用构造函数继承</p><p><strong>关键：用 .call() 和 .apply()方法,在子类构造函数中,调用父类构造函数</strong></p><p><strong>缺点</strong>：1、只继承了父类构造函数的属性，没有继承父类原型的属性。</p><p>2、无法实现函数复用，如果父类构造函数里面有一个方法，会导致每一个子类实例上面都有相同的方法。</p><p>3.组合继承</p><p><strong>关键：原型链继承+借用构造函数继承</strong></p><p><strong>缺点</strong>：1、使用组合继承时，父类构造函数会被调用两次，子类实例对象与子类的原型上会有相同的方法与属性，浪费内存。</p><p>4.原型式继承</p><p><strong>关键：创建一个函数，将要继承的对象通过参数传递给这个函数，最终返回一个对象，它的隐式原型指向传入的对象。</strong> (<em><strong>Object.create()方法的底层就是原型式继承</strong></em>)</p><p><strong>缺点</strong>：只能继承父类函数原型对象上的属性和方法，无法给父类构造函数传参</p><p>5.寄生式继承</p><p><strong>关键：在原型式继承的函数里，给继承的对象上添加属性和方法，增强这个对象</strong></p><p><strong>缺点</strong>：只能继承父类函数原型对象上的属性和方法，无法给父类构造函数传参</p><p>6.寄生组合继承</p><p><strong>关键：原型式继承 + 构造函数继承</strong></p><p><strong>Js最佳的继承方式，只调用了一次父类构造函数</strong></p><p>7.混入继承</p><p><strong>关键：利用Object.assign的方法多个父类函数的原型拷贝给子类原型</strong></p><ol start="8"><li>class继承</li></ol><p><strong>关键：class里的extends和super关键字，继承效果与寄生组合继承一样</strong></p><h4 id="_28-什么是回调地狱-回调地狱会带来什么问题" tabindex="-1">28. 什么是回调地狱？回调地狱会带来什么问题？ <a class="header-anchor" href="#_28-什么是回调地狱-回调地狱会带来什么问题" aria-label="Permalink to &quot;28. 什么是回调地狱？回调地狱会带来什么问题？&quot;">​</a></h4><p>回调函数的层层嵌套，就叫做回调地狱。回调地狱会造成代码可复用性不强，可阅读性差，可维护性(迭代性差)，扩展性差等等问题。</p><h4 id="_29-promise是什么" tabindex="-1">29. Promise是什么 <a class="header-anchor" href="#_29-promise是什么" aria-label="Permalink to &quot;29. Promise是什么&quot;">​</a></h4><p>Promise是异步编程的一种解决方案，它是一个对象，可以获取异步操作的消息，他的出现大大改善了异步编程的困境，避免了地狱回调，它比传统的解决方案回调函数和事件更合理和更强大。</p><p><strong>promise本身只是一个容器,真正异步的是它的两个回调resolve()和reject()</strong></p><p><strong>promise本质 不是控制 异步代码的执行顺序（无法控制） ， 而是控制异步代码结果处理的顺序</strong></p><h4 id="_30-promise实例有哪些状态-怎么改变状态" tabindex="-1">30. promise实例有哪些状态，怎么改变状态 <a class="header-anchor" href="#_30-promise实例有哪些状态-怎么改变状态" aria-label="Permalink to &quot;30. promise实例有哪些状态，怎么改变状态&quot;">​</a></h4><p>（1）Promise的实例有<strong>三个状态</strong>:</p><ul><li>Pending（进行中）</li><li>Resolved（已完成）</li><li>Rejected（已拒绝）</li></ul><p>当把一件事情交给promise时，它的状态就是Pending，任务完成了状态就变成了Resolved、没有完成失败了就变成了Rejected。</p><p><strong>如何改变 promise 的状态</strong></p><ul><li>resolve(value): 如果当前是 pending 就会变为 resolved</li><li>reject(error): 如果当前是 pending 就会变为 rejected</li><li>抛出异常: 如果当前是 pending 就会变为 rejected</li></ul><p>注意：一旦从进行状态变成为其他状态就永远不能更改状态了。</p><h2 id="es6" tabindex="-1">😛es6 <a class="header-anchor" href="#es6" aria-label="Permalink to &quot;:stuck_out_tongue:es6&quot;">​</a></h2><ul><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li></ul><h2 id="vue2" tabindex="-1">😋Vue2 <a class="header-anchor" href="#vue2" aria-label="Permalink to &quot;:yum:Vue2&quot;">​</a></h2><h4 id="_1-vue生命周期-父组件和子组件生命周期钩子执行顺序是什么" tabindex="-1">1. vue生命周期,父组件和子组件生命周期钩子执行顺序是什么?? <a class="header-anchor" href="#_1-vue生命周期-父组件和子组件生命周期钩子执行顺序是什么" aria-label="Permalink to &quot;1. vue生命周期,父组件和子组件生命周期钩子执行顺序是什么??&quot;">​</a></h4><p><img src="https://img-blog.csdnimg.cn/img_convert/a5eeb478acd07ce15ff8352ff766c888.webp?x-oss-process=image/format,png" alt="生命周期.png"></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">vue生命周期就是</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">vue实例从创建到销毁的整个过程</span><span style="color:#89DDFF;">\`</span><span style="color:#BABED8;">我们称之为vue的生命周期</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">通过vue的生命周期我们可以在不同的阶段进行不同的逻辑操作</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;"> vue生命周期常用的钩子函数一共有8个，分别对应的钩子函数为beforeCreate 创建前、 created创建后、beforeMount 挂载前、mounted挂载后、beforeUpdate 更新前、updated更新后、beforeDestory 销毁前、 destoryed销毁后</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">页面一开始加载的时候就会触发创建前后和挂载前后的钩子函数</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> 而更新的钩子函数需要当我们改变data的时候才能触发</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">销毁的钩子函数必须得当组件进行切换的时候就会进行销毁</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">在项目开发过程中</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">我经常使用到的钩子函数有created</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;">我们经常</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">在created进行数据请求,或者获取本地存储的数据</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">还有一些其他的操作</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;"> 除了created还有mounted</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;">我们经常</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">在mounted里面获取dom元素</span><span style="color:#89DDFF;">\`</span><span style="color:#BABED8;"> (有时候也存在获取不到dom元素的情况</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">这个时候我们一般用$nextTick方法来解决)</span><span style="color:#89DDFF;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">每个生命周期钩子具体发生的事情：</span></span>
<span class="line"><span style="color:#BABED8;">⑴</span><span style="color:#82AAFF;">beforeCreate</span><span style="color:#BABED8;">(创建前)：在此生命周期函数执行的时候，data 和 methods 中的数据都还没有初始化。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">⑵</span><span style="color:#82AAFF;">created</span><span style="color:#BABED8;">(创建后)：在此生命周期函数中，data 和 methods 都已经被初始化好了，如果要调用 methods 中的方法，或者操作 data 中的数据，最早只能在 created 中操作。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">⑶</span><span style="color:#82AAFF;">beforeMount</span><span style="color:#BABED8;">(载入前)：在此生命周期函数执行的时候，模板已经在内存中编译好了，但是尚未挂载到页面中去，此时页面还是旧的。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">⑷</span><span style="color:#82AAFF;">mounted</span><span style="color:#BABED8;">(载入后)：此时页面和内存中都是最新的数据，这个钩子函数是最早可以操作 dom 节点的方法。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">⑸</span><span style="color:#82AAFF;">beforeUpdate</span><span style="color:#BABED8;">(更新前)：此时页面中显示的数据还是旧的，但是 data 中的数据是最新的，且页面并未和最新的数据同步。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">⑹</span><span style="color:#82AAFF;">Updated</span><span style="color:#BABED8;">(更新后)：此时页面显示数据和最新的 data 数据同步。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">⑺</span><span style="color:#82AAFF;">beforeDestroy</span><span style="color:#BABED8;">(销毁前)：当执行该生命周期函数的时候，实例身上所有的 data，所有的 methods 以及过滤器…等都处于可用状态，并没有真正执行销毁。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">⑻</span><span style="color:#82AAFF;">destroyed</span><span style="color:#BABED8;">(销毁后)：此时组件以及被完全销毁，实例中的所有的数据、方法、属性、过滤器…等都已经不可用了。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//下面两个钩子函数一般配合使用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">⑼</span><span style="color:#82AAFF;">activated</span><span style="color:#BABED8;">(组件激活时)：和上面的 beforeDestroy 和 destroyed 用法差不多，但是如果我们需要一个实例，在销毁后再次出现的话，用 beforeDestroy 和 destroyed 的话，就太浪费性能了。实例被激活时使用，用于重复激活一个实例的时候</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">⑽</span><span style="color:#82AAFF;">deactivated</span><span style="color:#BABED8;">(组件未激活时)：实例没有被激活时。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">⑾</span><span style="color:#82AAFF;">errorCaptured</span><span style="color:#BABED8;">(错误调用)：当捕获一个来自后代组件的错误时被调用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">结合实践：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">**</span><span style="color:#BABED8;">beforeCreate</span><span style="color:#89DDFF;">**</span><span style="color:#BABED8;">：通常用于插件开发中执行一些初始化任务</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">**</span><span style="color:#BABED8;">created</span><span style="color:#89DDFF;">**</span><span style="color:#BABED8;">：组件初始化完毕，可以访问各种数据，获取接口数据等</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">**</span><span style="color:#BABED8;">mounted</span><span style="color:#89DDFF;">**</span><span style="color:#BABED8;">：dom已创建，可用于获取访问数据和dom元素；访问子组件等。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">**</span><span style="color:#BABED8;">beforeUpdate</span><span style="color:#89DDFF;">**</span><span style="color:#BABED8;">：</span><span style="color:#82AAFF;">此时</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">view</span><span style="color:#89DDFF;">\`</span><span style="color:#BABED8;">层还未更新，可用于获取更新前各种状态</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">**</span><span style="color:#BABED8;">updated</span><span style="color:#89DDFF;">**</span><span style="color:#BABED8;">：</span><span style="color:#82AAFF;">完成</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">view</span><span style="color:#89DDFF;">\`</span><span style="color:#BABED8;">层的更新，更新后，所有状态已是最新</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">**</span><span style="color:#BABED8;">beforeDestroy</span><span style="color:#89DDFF;">**</span><span style="color:#BABED8;">：实例被销毁前调用，可用于一些定时器或订阅的取消</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">**</span><span style="color:#BABED8;">destroyed</span><span style="color:#89DDFF;">**</span><span style="color:#BABED8;">：销毁一个实例。可清理它与其它实例的连接，解绑它的全部指令及事件监听器</span></span></code></pre></div><p>补充:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">父组件和子组件生命周期钩子执行顺序</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">加载渲染过程</span><span style="color:#89DDFF;">\`</span><span style="color:#BABED8;">:</span></span>
<span class="line"><span style="color:#BABED8;">父 beforeCreate </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> 父 created </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> 父 beforeMount </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> 子 beforeCreate </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> 子 created </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> 子 beforeMount </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> 子 mounted </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> 父 mounted</span></span>
<span class="line"><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">更新过程</span><span style="color:#89DDFF;">\`</span><span style="color:#BABED8;">:</span></span>
<span class="line"><span style="color:#BABED8;">父 beforeUpdate </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> 子 beforeUpdate </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> 子 updated </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> 父 updated</span></span>
<span class="line"><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">销毁过程</span><span style="color:#89DDFF;">\`</span><span style="color:#BABED8;">:</span></span>
<span class="line"><span style="color:#BABED8;">父 beforeDestroy </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> 子 beforeDestroy </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> 子 destroyed </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#BABED8;"> 父 destroyed</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">父组件可以监听到子组件的生命周期</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">使用$emit或者使用@</span><span style="color:#FFCB6B;">hook</span><span style="color:#89DDFF;">:</span></span></code></pre></div><h4 id="_2-vue路由守卫" tabindex="-1">2. vue路由守卫? <a class="header-anchor" href="#_2-vue路由守卫" aria-label="Permalink to &quot;2. vue路由守卫?&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">所谓的路由守卫就是当我们</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">进行页面跳转的时候会触发的钩子函数</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">我们把它称之为vue路由守卫</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;"> vue一共给我们提供了三种路由守卫</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;">第一种</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">全局路由守卫</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;">第二种是</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">组件内路由守卫</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;">第三种</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">路由独享守卫</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">这个是写在路由里面</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;"> 全局路由守卫包含：beforeEach 前置守卫，beforeResolve 路由解析守卫，afterEach 后置守卫 ，组件内路由守卫：beforeRouteEnter 路由进入之前，beforeRouteUpdate 路由更新之前，beforeRouteLeave 路由离开之前，路由独享守卫：beforEnter 路由进入之前，这几个钩子函数里面都有一个回调函数</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">这个回调函数里面会有三个参数</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;">分别是</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">to,from,next</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">分别对应的是要进入的路由、离开之前的路由</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">以及进入写一个路由在项目中我们经常使用路由守卫实现页面的鉴权</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">比如</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;">当用户登录之后</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">我们会把后台返回的token以及用户信息保存到vuex和本地</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">当页面进行跳转的时候</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">我们会在路由守卫里面获取vuex里面的token</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">如果token存在的话</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">我们则使用next让他进入要跳转的页面</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">如果token不存在的话我们使用next方法让他回到登录页</span></span></code></pre></div><h4 id="_3-v-if与v-show的区别" tabindex="-1">3. v-if与v-show的区别? <a class="header-anchor" href="#_3-v-if与v-show的区别" aria-label="Permalink to &quot;3. v-if与v-show的区别?&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">v</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">if和v</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">show都是控制元素的显示与隐藏</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#BABED8;">不过v</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">if控制元素的显示和隐藏的时候会删除对用的dom元素</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">当每一个显示的时候</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">都会重新创建dom和渲染</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#BABED8;">而v</span><span style="color:#89DDFF;">-</span><span style="color:#82AAFF;">show则是通过css的</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">display</span><span style="color:#89DDFF;">\`</span><span style="color:#BABED8;">:</span><span style="color:#FFCB6B;">none和display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;">block来控制元素的显示与隐藏</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">v</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">if比较耗费性能</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#82AAFF;">所以我们涉及到</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">频繁的显示隐藏操作</span><span style="color:#89DDFF;">\`</span><span style="color:#82AAFF;">我们建议使用</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">v-show</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">如果不是频繁操作的话</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">我们可以v</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">if在项目中我会经常使用v</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">if和v</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">show</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">比如我们在搜索功能的时候</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">他有一个历史记录</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">这个时候我们根据是否有搜索的结果来判断历史记录的显示与隐藏</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">这块我就可以使用v</span><span style="color:#89DDFF;">-</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">当然用v</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">show也可以</span><span style="color:#89DDFF;">.</span></span></code></pre></div><h4 id="_4-v-for与v-if的优先级那个高-如果同时使用v-for和v-if怎么解决" tabindex="-1">4. v-for与v-if的优先级那个高?如果同时使用v-for和v-if怎么解决? <a class="header-anchor" href="#_4-v-for与v-if的优先级那个高-如果同时使用v-for和v-if怎么解决" aria-label="Permalink to &quot;4. v-for与v-if的优先级那个高?如果同时使用v-for和v-if怎么解决?&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">v</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">for的优先级高</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;"> 因为v</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">for的时候我们才开始渲染dom元素</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">这个v</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">if还无法进行判断</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">v</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">for和v</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">if不能同时使用</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">我们可以通过标签</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">比如div或者template标签来进行包裹</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">把v</span><span style="color:#89DDFF;">-</span><span style="color:#82AAFF;">if写到包裹的标签上面</span><span style="color:#BABED8;">(写到v</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">for外面）</span></span></code></pre></div><h4 id="_5-methods、computed和watch的区别" tabindex="-1">5. methods、computed和watch的区别? <a class="header-anchor" href="#_5-methods、computed和watch的区别" aria-label="Permalink to &quot;5. methods、computed和watch的区别?&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">首先呢</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;">methods是</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">用来定义方法的区域</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">methods定义的方法需要调用才能触发</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;"> 不具备缓存，</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> computed是计算属性；watch是监听，监听data中的数据变化。</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">computed</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">支持缓存</span><span style="color:#89DDFF;">\`</span><span style="color:#BABED8;">，当其依赖的属性的值发生变化时，计算属性会重新计算，反之，则使用缓存中的属性值；       </span><span style="color:#82AAFF;">watch</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">不支持缓存</span><span style="color:#89DDFF;">\`</span><span style="color:#BABED8;">，当对应属性发生变化的时候，响应执行。</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">computed</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">不支持异步</span><span style="color:#89DDFF;">\`</span><span style="color:#BABED8;">，有异步操作时无法监听数据变化；</span><span style="color:#82AAFF;">watch</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">支持异步操作</span><span style="color:#89DDFF;">\`</span><span style="color:#BABED8;">。</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">computed</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">第一次加载时就监听</span><span style="color:#89DDFF;">\`</span><span style="color:#BABED8;">；</span><span style="color:#82AAFF;">watch默认第一次加载时不监听</span><span style="color:#BABED8;">(immediate 组件创建时刻执行与否</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  immediate: </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">第一次加载时监听（默认为false）</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">deep 深度监听 </span><span style="color:#82AAFF;">不推荐使用</span><span style="color:#BABED8;">(非常的消耗性能))</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> computed中的函数必须调用return；watch不是。</span></span>
<span class="line"><span style="color:#BABED8;">  使用场景：</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> computed：一个属性受到多个属性影响，如：购物车商品结算。</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> watch：一个数据影响多条数据，如：搜索数据。</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> 数据变化响应，执行异步操作，或高性能消耗的操作，watch为最佳选择</span></span></code></pre></div><h4 id="_6-vue组件通信方式" tabindex="-1">6. vue组件通信方式 <a class="header-anchor" href="#_6-vue组件通信方式" aria-label="Permalink to &quot;6. vue组件通信方式&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">1.</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">父传子</span><span style="color:#89DDFF;">\`</span><span style="color:#BABED8;"> 在子组件的标签上定义属性 子组件通过props来进行接受</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">可以通过数组的方式进行接受</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">也可以通过对象的方式来进行接收</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">如果父组件没有传递属性</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">子组件可以default来设置默认值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">2.</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">子传父</span><span style="color:#89DDFF;">\`</span><span style="color:#BABED8;"> 子组件通过this</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$emit</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">自定义的事件</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">要传给父组件的数据)</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> 父组件通过子组件的标签监听自定义的事件</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">通过方法来接收传递的数据</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">3.</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">非父子组件通信</span><span style="color:#89DDFF;">\`</span><span style="color:#BABED8;">   通过中央事件总线</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">我们也称之为eventBus</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;"> 我们需要创建一个空的js文件</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">导出这个空的vue实例</span></span>
<span class="line"><span style="color:#BABED8;"> 传数据的时候 </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">$bus</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">$emit 传</span></span>
<span class="line"><span style="color:#BABED8;"> 接数据的时候是在 钩子函数 created 中 </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">$bus</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">$on 接收 第一个参数是事件名称 第二个参数是一个回调函数   包含了要接受的数据</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">以上就是非父子组件通信的方式</span></span></code></pre></div><h4 id="_7-nexttick方法有什么作用" tabindex="-1">7. $nextTick方法有什么作用? <a class="header-anchor" href="#_7-nexttick方法有什么作用" aria-label="Permalink to &quot;7. $nextTick方法有什么作用?&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">$nextTick也叫做异步更新队列方法</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">而$nextTick方法的主要作用就是等待dom元素加载完毕之后才会执行的回调函数</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;">我们经常会在$nextTick方法里面</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">获取dom元素</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#BABED8;">比如：beforeCreated获取DOM元素、获取最新的滚动列表</span></span></code></pre></div><h4 id="_8-说一下什么是mvvm模式" tabindex="-1">8. 说一下什么是mvvm模式? <a class="header-anchor" href="#_8-说一下什么是mvvm模式" aria-label="Permalink to &quot;8. 说一下什么是mvvm模式?&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">MVVM 是Model代表数据模型，数据和业务逻辑都在Model层中定义；View代表UI视图，负责数据的展示；ViewModel负责监听Model中数据的改变并且控制视图的更新，处理用户交互操作；</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">View 的变化会自动更新到 ViewModel ， ViewModel 的变化也会自动同步到 View 上显示。这种自动同步是因为 ViewModel 中的属性实现了 Observer ，当属性变更时都能触发对应的操作。</span></span></code></pre></div><h4 id="_9-vue常用的指令有哪些" tabindex="-1">9. vue常用的指令有哪些? <a class="header-anchor" href="#_9-vue常用的指令有哪些" aria-label="Permalink to &quot;9. vue常用的指令有哪些?&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">v</span><span style="color:#89DDFF;">-</span><span style="color:#89DDFF;font-style:italic;">if</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">v</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">show</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">v</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">html</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">v</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">text</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">v</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">on</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">v</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">bind</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">v</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">model</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">v</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">for</span></span></code></pre></div><h4 id="_10-vue常用的修饰符有哪些" tabindex="-1">10. vue常用的修饰符有哪些? <a class="header-anchor" href="#_10-vue常用的修饰符有哪些" aria-label="Permalink to &quot;10. vue常用的修饰符有哪些?&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">trim 去除首尾多余的空格</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">stop 阻止事件冒泡</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">once 只渲染一次</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">self 事件只作用在元素本身</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">number 将值转化为number类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">capter 组件之间捕获</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prevent 阻止元素的默认行为</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">native 事件穿透</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">让我们可以在自定义组件上定义事件和方法</span></span></code></pre></div><h4 id="_11-说一下你对keep-alive的理解-以及在项目中如何使用" tabindex="-1">11. 说一下你对keep-alive的理解?以及在项目中如何使用? <a class="header-anchor" href="#_11-说一下你对keep-alive的理解-以及在项目中如何使用" aria-label="Permalink to &quot;11. 说一下你对keep-alive的理解?以及在项目中如何使用?&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">keep</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">alive是vue内置的一个组件，而这个组件的作用就是能够缓存不活动的组件，我们能够知道，一般情况下，组件进行切换的时候，默认会进行销毁，如果有需求，某个组件切换后不进行销毁，而是保存之前的状态，比如：说刚刚填好的表单数据。那么就可以利用keep</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">alive来实现。在搭建 vue 项目时，有某些路由组件没必要多次渲染，所以需要将组件在内存中进行‘持久化’，此时在router</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">view上使用keep</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">alive。 keep</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">alive可以使被包含的路由组件状态维持不变，即便是组件切换了，其内的状态依旧维持在内存之中。在下一次显示时，也不会重新渲染。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">include </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> 字符串或正则表达式。只有名称匹配的组件会被缓存。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">exclude </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> 字符串或正则表达式。任何名称匹配的组件都不会被缓存。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">max</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">数字最多可以缓存多少组件。</span></span></code></pre></div><h4 id="_12-说一下什么是vue过滤器-有几种-项目中如何使用-请举例说明" tabindex="-1">12. 说一下什么是vue过滤器? 有几种?项目中如何使用,请举例说明? <a class="header-anchor" href="#_12-说一下什么是vue过滤器-有几种-项目中如何使用-请举例说明" aria-label="Permalink to &quot;12. 说一下什么是vue过滤器? 有几种?项目中如何使用,请举例说明?&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">所谓的vue过滤器就是将数据进行二次处理</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">得到我们想要的结果数据</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">vue的过滤器分为两种</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">第一种是全局过滤器</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">通过vue</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">filter来进行定义</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">第二种是局部过滤器</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">需要定义在组件内部项目中我们通过过滤器将后台返回的状态0 和1 转化为支付或者未支付</span></span></code></pre></div><h4 id="_13-说一下你对slot插槽的理解" tabindex="-1">13. 说一下你对slot插槽的理解? <a class="header-anchor" href="#_13-说一下你对slot插槽的理解" aria-label="Permalink to &quot;13. 说一下你对slot插槽的理解?&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">首先呢</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">所谓的插槽就是一个占位符</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">将自定义组件的内容展示出来</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">我们知道自定义的组件里面如果写内容的话</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">页面是不会显示出来的</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">如果我们想让自定义组件里面的内容显示出来</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">我们就需要使用slot的插槽</span><span style="color:#89DDFF;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">●</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">默认插槽</span><span style="color:#89DDFF;">\`</span><span style="color:#BABED8;">：又名匿名插槽，当slot没有指定name属性值的时候一个默认显示插槽，一个组件内只有有一个匿名插槽。</span></span>
<span class="line"><span style="color:#BABED8;">●</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">具名插槽</span><span style="color:#89DDFF;">\`</span><span style="color:#BABED8;">：带有具体名字的插槽，也就是带有name属性的slot，一个组件可以出现多个具名插槽。</span></span>
<span class="line"><span style="color:#BABED8;">●</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">作用域插槽</span><span style="color:#89DDFF;">\`</span><span style="color:#BABED8;">：默认插槽、具名插槽的一个变体，可以是匿名插槽，也可以是具名插槽，该插槽的不同点是在子组件渲染作用域插槽时，可以将子组件内部的数据传递给父组件，让父组件根据子组件的传递过来的数据决定如何渲染该插槽。</span></span></code></pre></div><h4 id="_14-vue中data发生变化-视图不更新如何解决" tabindex="-1">14. vue中data发生变化,视图不更新如何解决? <a class="header-anchor" href="#_14-vue中data发生变化-视图不更新如何解决" aria-label="Permalink to &quot;14. vue中data发生变化,视图不更新如何解决?&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">因为Vue实例中的数据是响应式的而我们新增的属性并不是响应式的，由于受现在JavaScript的限制，Vue无法检测到属性的新增或删除。所以有时无法实时的更新到视图上。所以我在项目中遇到这类问题的时候一般是通过this</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">$set方法去解决</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;"> this</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">$set方法一共有三个参数</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">分别是目前属性</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">新增属性</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">新增的值</span></span></code></pre></div><p>补充:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">$set可以使得新添加的属性也是响应式的，并触发视图更新</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">解决数据改变视图不更新问题</span></span></code></pre></div><h4 id="_15-为什么vue中data必须是一个函数" tabindex="-1">15. 为什么vue中data必须是一个函数? <a class="header-anchor" href="#_15-为什么vue中data必须是一个函数" aria-label="Permalink to &quot;15. 为什么vue中data必须是一个函数?&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">如果data是一个函数的话，这样每复用一次组件，就会返回一份新的data，类似于给每个组件实例创建一个私有的数据空间，让各个组件实例维护各自的数据。而单纯的写成对象形式，就使得所有组件实例共用了一份data，就会造成一个变了全都会变的结果。所以说vue组件的data必须是函数。这都是因为js的特性带来的，跟vue本身设计无关。</span></span></code></pre></div><h4 id="_16-props设置默认值-props自定义验证函数-default设置对象和普通字符串写法有啥区别" tabindex="-1">16. props设置默认值? props自定义验证函数? default设置对象和普通字符串写法有啥区别 <a class="header-anchor" href="#_16-props设置默认值-props自定义验证函数-default设置对象和普通字符串写法有啥区别" aria-label="Permalink to &quot;16. props设置默认值? props自定义验证函数? default设置对象和普通字符串写法有啥区别&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">设置默认值：</span><span style="color:#89DDFF;font-style:italic;">default</span></span>
<span class="line"><span style="color:#BABED8;">自定义验证函数：validator</span></span>
<span class="line"><span style="color:#FFCB6B;">设置普通字符串</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#BABED8;">:String</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#FFCB6B;">设置对象</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#BABED8;">:</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{}</span></span></code></pre></div><h4 id="_17-vue路由传参方式" tabindex="-1">17. vue路由传参方式？ <a class="header-anchor" href="#_17-vue路由传参方式" aria-label="Permalink to &quot;17. vue路由传参方式？&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">一、</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">params传参</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">$router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#BABED8;">	</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">admin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">　　　　</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">//这里的params是一个对象，id是属性名，item.id是值(可以从当前组件或者Vue实例上直接取) </span></span>
<span class="line"><span style="color:#BABED8;">	</span><span style="color:#F07178;">params</span><span style="color:#89DDFF;">:{</span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;">item</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">id</span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">) </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//这个组件对应的路由配置 </span></span>
<span class="line"><span style="color:#89DDFF;">{</span><span style="color:#F07178;">　　</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">//组件路径 </span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#FFCB6B;">path</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/admin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">　　</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">//组件别名 </span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">admin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">　　</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">//组件名 </span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#FFCB6B;">component</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Admin</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#BABED8;">通过params传递参数，如果我们想获取 id 的参数值，可以通过this</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">$route</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">params</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">id这种方式来打印出来就可以得到了；</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">注意：获取参数的时候是 $route，跳转和传参的时候是 $router</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">二、</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">路由属性配置传参：</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">$router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">	</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/admin/\${item.id}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">) </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//这个组件对应的路由配置 </span></span>
<span class="line"><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> 　　</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">//组件路径 </span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#FFCB6B;">path</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/admin:id</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> 　　</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">//组件别名 </span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">admin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> 　　</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">//组件名 </span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#FFCB6B;">component</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Admin</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">通过路由属性配置传参我们可以用this</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">$route</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">params</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">id来获取到 id 的值，</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">注意 </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;"> $router</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">push 方法里面路径带的是值，</span><span style="color:#82AAFF;">路由配置项那里带的是变量名</span><span style="color:#BABED8;">(属性名)来实现的对应；</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">以上两种传参方式基本上可以理解为 ajax 中的 post 请求方式，参数都是不可见的，但是上面两种方法都有一个弊端，就是当页面刷新了是获取不到参数值的，那么有没有一种方法是页面刷新之后参数依然存在呢？</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">三、</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">query传参</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">$router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#BABED8;">	</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/admin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">　　　　 </span></span>
<span class="line"><span style="color:#BABED8;">	</span><span style="color:#F07178;">query</span><span style="color:#89DDFF;">:{</span><span style="color:#BABED8;">id：item.id</span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">) </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//这个组件对应的路由配置 </span></span>
<span class="line"><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> 　　</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">//组件路径 </span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#FFCB6B;">path</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/admin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> 　　</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">//组件别名 </span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">admin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> 　　</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">//组件名 </span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#FFCB6B;">component</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Admin</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">第三种方式是用 query 来传参，这种方式是可以解决页面刷新参数消失问题的，这种方式可以理解为是 ajax 中的 get 方法，参数是直接在 url 后面添加的，参数是可见的，所以解决页面刷新参数消失问题建议使用此方法来解决；</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">区别</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#BABED8;">（</span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">）params传参</span></span>
<span class="line"><span style="color:#BABED8;">只能用 name，不能用 path。</span></span>
<span class="line"><span style="color:#BABED8;">地址栏不显示参数名称 id，但是有参数的值。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">（</span><span style="color:#F78C6C;">2</span><span style="color:#BABED8;">）query传参</span></span>
<span class="line"><span style="color:#BABED8;">name 和 path 都能用。用 path 的时候，提供的 path 值必须是相对于根路径的相对路径，而不是相对于父路由的相对路径，否则无法成功访问。</span></span>
<span class="line"><span style="color:#BABED8;">地址栏显示参数格式为</span><span style="color:#89DDFF;">?</span><span style="color:#BABED8;">id</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">&amp;</span><span style="color:#BABED8;">code</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span></span></code></pre></div><h4 id="_18-vue事件穿透的方法" tabindex="-1">18. Vue事件穿透的方法? <a class="header-anchor" href="#_18-vue事件穿透的方法" aria-label="Permalink to &quot;18. Vue事件穿透的方法?&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">native 事件穿透</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">让我们可以在⾃定义组件上定义事件和⽅法</span></span></code></pre></div><h4 id="_19-v-text-v-html-区别" tabindex="-1">19. v-text v-html 区别? <a class="header-anchor" href="#_19-v-text-v-html-区别" aria-label="Permalink to &quot;19. v-text v-html 区别?&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">1</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">v</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">text：会把标签转义输出。即原模原样输出，h1标签没效果</span></span>
<span class="line"><span style="color:#BABED8;">2</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">v</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">html：会直接输出结果。即h1标签会出效果</span></span></code></pre></div><h4 id="_20-vue中路由跳转方式" tabindex="-1">20. vue中路由跳转方式? <a class="header-anchor" href="#_20-vue中路由跳转方式" aria-label="Permalink to &quot;20. vue中路由跳转方式?&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">1.</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">router-link</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">router-link</span><span style="color:#89DDFF;"> :to=&quot;{path:&#39;/home&#39;}&quot;&gt; </span><span style="color:#C792EA;">不带参数</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;router-link :to=&quot;{name:&#39;home&#39;, params: {</span><span style="color:#BABED8;">id:</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">}}&quot;&gt;  </span><span style="color:#C792EA;">带参数</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;router-link :to=&quot;{name:&#39;home&#39;, query: {</span><span style="color:#BABED8;">id:</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">}}&quot;&gt; </span><span style="color:#C792EA;">带参数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">2.\`this.$router.push()\` (函数里面调用)</span></span>
<span class="line"><span style="color:#89DDFF;">this.$router.push(&#39;/home&#39;) </span><span style="color:#C792EA;">不带参数</span></span>
<span class="line"><span style="color:#89DDFF;">this.$router.push({path:&#39;/home&#39;})不带参数</span></span>
<span class="line"><span style="color:#89DDFF;">this.$router.push({path:&#39;/home&#39;,query: {</span><span style="color:#BABED8;">id:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}})带参数</span></span>
<span class="line"><span style="color:#89DDFF;">this.$router.push({name:&#39;home&#39;,params: {</span><span style="color:#BABED8;">id:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}}) </span><span style="color:#C792EA;">带参数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">3.\`this.$router.replace()\` (用法同push)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">4.\`this.$router.go(n)\`</span></span>
<span class="line"><span style="color:#89DDFF;">向前或者向后跳转n个页面，n可为正整数或负整数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">区别：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">this.$router.push 跳转到指定url路径，并向history栈中添加一个记录，点击后退会返回到上一个页面</span></span>
<span class="line"><span style="color:#89DDFF;">this.$router.replace 跳转到指定url路径，但是history栈中不会有记录，点击返回会跳转到上上个页面 (就是直接替换了当前页面)</span></span>
<span class="line"><span style="color:#89DDFF;">this.$router.go(n) 向前或者向后跳转n个页面，n可为正整数或负整数</span></span></code></pre></div><h2 id="vue3" tabindex="-1">😋Vue3 <a class="header-anchor" href="#vue3" aria-label="Permalink to &quot;:yum:Vue3&quot;">​</a></h2><ol><li><p>setup类似于react hooks用法</p><ol><li>setup函数围绕着beforeCreate和created生命周期运行，所以无法使用data和methods重的数据和方法</li><li>setup函数是CompositionAPI(组合API)的入口</li><li>在setup函数重定义的数据和方法，最后都要return出去，否则无法在模板中使用。</li></ol></li><li><p>setup注意点：</p><ol><li>setup函数优于created生命周期，所以无法使用data和methods的变量和方法</li><li>不能在setup函数中使用data和methods，vue官方为了避免此类问题，setup函数中的this修改为undefined</li><li>setup函数，只能是同步，不能是异步！！</li></ol></li><li><p>示例: 结合ref使用</p></li></ol><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">{{name}}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">{{age}}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">add()</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">按钮</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 引入核心的ref定义数据</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">ref</span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">// 现在已经不需要再data中定义数据了}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// setup才是我们的重点</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">setup</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// ref方法中定义的就是name的值</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">张三</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 定义age的值</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">age</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">18</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 值得注意的是 事件函数也是定义在setup中的</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// 注意！！要修改变量的值，必须使用.value修改</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#BABED8;">age</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 最后一定要将方法和变量暴露出去</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">age</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">add</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span></code></pre></div><ol start="4"><li>复杂数据结构定义和操作</li></ol><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">del(i)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">(item,i) in list.list</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:key</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">i</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">            {{ item }}</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">reactive</span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setup</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ref只能定义简单数据结构，reactive专门用来定义复杂数据</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">list</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        list</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">张三</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        ]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 删除数组中的数据</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">del</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">i</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">list</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">splice</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">i</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">list</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">del</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>总结： ref是用于vue3中的基本数据类型的双向绑定</li><li><pre><code>  reactive是用于处理对象的双向绑定
</code></pre></li></ul><ol start="5"><li>在setup函数中 传递2个数据 props和context <ol><li>props数据格式是响应式，但是注意这里不能使用ES6的解构，否则会让响应式消除</li></ol></li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">setup</span><span style="color:#BABED8;">(props)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">a</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">props</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 接受外部传递的数据</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">a</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ol start="6"><li>生命周期 <ol><li>x和2.x生命周期发生了不同</li></ol></li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">onBeforeMount</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">onMounted</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">onBeforeUpdate</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">onUpdated</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">onBeforeUnmount</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">onUnmounted</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setup</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 在setup中使用生命周期即可</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">onMounted</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">组件挂载后阶段</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ol start="7"><li>计算属性和监听器</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">ref</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">computed</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">watch</span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">setup</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">age</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">18</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//定义数据</span></span>
<span class="line"><span style="color:#F07178;">            </span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// watch监听器</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 第一个参数是监听的值，age.value 表示当 age.value 发生变化就会触发监听器的回调函数，即第二个参数，第二个参数可以执行监听时候的回调</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">watch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">age</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;font-style:italic;">val</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">监听到的val其实就是age.value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// computed计算属性</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 计算属性 computed 是一个方法，里面需要包含一个回调函数，当我们访问计算属性返回结果时，会自动获取回调函数的值：</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">doubleCount</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">computed</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">age</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#BABED8;">age</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#BABED8;">doubleCount</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span></code></pre></div><ol start="8"><li>获取路由</li></ol><blockquote><p>Vue 3.0 中通过 getCurrentInstance 方法获取当前组件的实例，然后通过 ctx 属性获得当前上下文， ctx.$router 是 Vue Router 实例，里面包含了 currentRoute 可以获取到当前的路由信息</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">getCurrentInstance</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setup</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ctx获取上下文</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">ctx</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">getCurrentInstance</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">ctx</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">$router</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">currentRoute</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 扩展 如果要获取仓库store数据 一样是在计算属性中</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">computed</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ctx</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">$store</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">state</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">test</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">a</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">a</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ol start="9"><li>组件的引入没有变化</li></ol><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Stu</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> Stu </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@/components/Stu.vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">App</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">components</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    Stu</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ol start="10"><li>Vue2和Vue3双向绑定 <ol><li>v2 是Object.defineProperty</li><li>v3 是proxy</li></ol></li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">Vue2</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#BABED8;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#BABED8;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">     </span><span style="color:#F07178;">get</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">     </span><span style="color:#F07178;">set</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">newValue</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#676E95;font-style:italic;">//深度监听</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#82AAFF;">observer</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">newValue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">value</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">         </span><span style="color:#BABED8;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">newValue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">         </span><span style="color:#82AAFF;">updateView</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">Vue3</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> proxyData </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#BABED8;">(data</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">get</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;">receive</span><span style="color:#89DDFF;">){</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 只处理本身(非原型)的属性</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ownKeys</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ownKeys</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">ownKeys</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">includes</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">get</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 监听</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">receive</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">result</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">set</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">val</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">reveive</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 重复的数据，不处理</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">oldVal</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">target</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">oldVal</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">val</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">reveive</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">set</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">val</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">result</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">deleteProperty</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">key</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">deleteProperty</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">delete property</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">key</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">result</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">result</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">result</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><ol start="11"><li>vue2和vue3的不同 <ol><li>弃用全局API new Vue，使用createApp const app = Vue.createApp({})</li><li>弃用Vue.prototype,在vue3中定义使用如下： const app = Vue.createApp({}) app.config.globalProperties.$http=() =&gt; {}</li><li>不再使用this.$nextTick 方法 import {nextTick} from &#39;vue&#39; nextTick(()=&gt;{ // 执行的操作 })</li><li>filter被移除</li></ol></li></ol><h2 id="react" tabindex="-1">😋React <a class="header-anchor" href="#react" aria-label="Permalink to &quot;:yum:React&quot;">​</a></h2><ul><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li></ul><h2 id="uniapp" tabindex="-1">😋Uniapp <a class="header-anchor" href="#uniapp" aria-label="Permalink to &quot;:yum:Uniapp&quot;">​</a></h2><ul><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li></ul><h2 id="app" tabindex="-1">😋App <a class="header-anchor" href="#app" aria-label="Permalink to &quot;:yum:App&quot;">​</a></h2><ul><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li><li>客官先别急，作者正在飞速收录中~😃</li></ul><h2 id="ui-site" tabindex="-1">😋Ui-Site <a class="header-anchor" href="#ui-site" aria-label="Permalink to &quot;:yum:Ui-Site&quot;">​</a></h2>`,258);function d(A,u,E,h,g,f){const n=t("font");return c(),r("div",null,[y,F,l(n,{color:"#dd00dd"},{default:p(()=>[a("     看到这篇文章的时候，猜想您也正在准备迎接更好的开始，不管当前就业环境有多么的恶劣，但愿你能一路过关斩将披荆斩棘，希望你早日找到称心如意的工作!")]),_:1}),i,l(n,{color:"#dd00dd"},{default:p(()=>[a("     此网站博客模板全套开源，所有文章皆可转载，所有资源创作整理不易，烦请麻烦大家备注一下出处。🌹🌹，希望你前程似锦，祝愿你往后的每一天都是艳阳高照风和日丽!")]),_:1}),B])}const b=e(D,[["render",d]]);export{v as __pageData,b as default};
